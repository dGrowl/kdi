from typing import Any, Callable, List, Literal, Optional, overload

class Voice:
	id: str
	name: str
	languages: List[str]
	gender: str
	age: int

class Engine:
	def __init__(self) -> None: ...
	def say(self, text: str, name: Optional[str] = None) -> None: ...
	def runAndWait(self) -> None: ...
	def stop(self) -> None: ...
	def isBusy(self) -> bool: ...
	@overload
	def getProperty(self, name: Literal["voices"]) -> List[Voice]: ...
	@overload
	def getProperty(self, name: Literal["voice"]) -> str: ...
	@overload
	def getProperty(self, name: Literal["rate"]) -> int: ...
	@overload
	def getProperty(self, name: Literal["volume"]) -> float: ...
	@overload
	def getProperty(self, name: str) -> Any: ...
	def getProperty(self, name: str) -> Any: ...
	def setProperty(self, name: str, value: str | int | float) -> None: ...
	def connect(self, event: str, callback: Callable[..., None]) -> None: ...
	def disconnect(self, callback: Callable[..., None]) -> None: ...
	def save_to_file(
		self, text: str, filename: str, name: Optional[str] = None
	) -> None: ...

class DriverProxy:
	def __init__(self) -> None: ...
	def setProperty(self, name: str, value: str | int | float) -> None: ...
	def getProperty(self, name: str) -> str | int | float: ...
	def runAndWait(self) -> None: ...
	def stop(self) -> None: ...

def init(driverName: Optional[str] = None, debug: bool = False) -> Engine: ...
